'''
4.卷积的应用
用一个模板和一幅图像进行卷积，对于图像上的一个点，让模板的原点和该点重合，然后模板上的点和图像上对应的点相乘，然后各点的积相加，就得到了该点的卷积值。对图像上的每个点都这样处理。由于大多数模板都是对称的，所以模板不旋转。卷积是一种积分运算，用来求两个曲线重叠区域面积。可以看作加权求和，可以用来消除噪声、特征增强。
把一个点的像素值用它周围的点的像素值的加权平均代替。
卷积是一种线性运算,图像处理中常见的mask运算都是卷积，广泛应用于图像滤波。
卷积关系最重要的一种情况，就是在信号与线性系统或数字信号处理中的卷积定理。利用该定理，可以将时间域或空间域中的卷积运算等价为频率域的相乘运算，从而利用FFT等快速算法，实现有效的计算，节省运算代价。
https://www.cnblogs.com/alexanderkun/p/8149059.html
https://baike.baidu.com/item/%E5%8D%B7%E7%A7%AF/9411006?fr=aladdin

网上说卷积和滤波不一样，书上卷积滤波是认为一样的且默认是卷积型就是图像会缩小
在某个帖子上看说过，图像滤波一般掩模是中心对称的不用旋转，而网上说他们区别就是一个旋转图像变小（帖子上说所以填充），一个不旋转图像大小不变（帖子上说已经0填充了），所以我感觉区别应该不大必要的时候可能需要认真区别，现在先认识一般滤波操作

线性滤波：
    高斯滤波
非线性滤波：
    中值滤波
'''


import cv2
import numpy as np
from matplotlib import pyplot as plt




img = cv2.imread('cat512.jpg')
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
##################################################高斯######################################################################
img2Gauss = cv2.GaussianBlur(img,(5,5),0)
###########################################
img2GaussMYSELF






plt.figure()
plt.subplot(131)
plt.imshow(img)
plt.title('src')
plt.xticks([]),plt.yticks([])

plt.subplot(132)
plt.imshow(img2Gauss)
plt.title('opencv')
plt.xticks([]),plt.yticks([])

plt.suptitle('Gauss')





#######################################################################################################################
plt.show()

